.TH CIM 1 "13 Jan 1989"
.SH NAME
cim \- Compile Simula programs into C

.SH SYNOPSIS
.B cim
[ 
.I options
]
.I file ...
.SH DESCRIPTION
.I GNU Cim
is the Simula compiler that compiles into C. The C program
will then be compiled with
.I cc
, and linked with other modules.

.I GNU Cim
will accept one Simula program and other none Simula modules.
The specified Simula program will be compiled and linked with the 
modules. If a main Simula program is compiled then it will be automatic
linked with the Simula modules that it uses. If a separate Class or
Procedure is compiled, then the linking will be supressed.
.SH OPTIONS
The following options are accepted by the 
.I cim
command:
.TP
.B -a
Try to produce an atr-file even if an error occurs.
Compare the produced atr-file with the atr-file produced from 
previous compilation and if they differ return an error status code.
With use of this option it is possible to have external modules
with circular dependencies. You will then need to compile
all the modules with this option until no error status codes are
returned. Then you should do a final compilation with option
-p or option -d. To get this to work it is important that the
topmost external head does not contain any external declaration
that is part of the circular dependency. Such external declarations
must be placed in an external head that comes after the first
class- or procedure decraration.
.TP
.B -b
The following argument will be parsed to the CC-command.
.TP
.B -B
The following argument will be parsed to the link-command.
.TP
.B -c
Supress linking of the complete program.
.TP
.B -C\fIname\fP
Set the \fIname\fP of the C compiler.
.TP
.B -d
Compare the produced c-code with the code produced from previous compilation
and if they are equal then touch the object-file instead 
of compiling the c-code.
.TP
.B -D\fIname\fP
Define a symbol \fIname\fP.
.TP
.B -e
On systems that support dynamic linking, this  prevents 
linking with the shared libraries. 
On other systems, this option has no effect.
.TP
.B -E
Run only the preprocessor and output the result to standard output.
.TP
.B -g
Make the C compiler produce debugging information.
This option is useful for debugging the generated code.
.TP
.B -G
Invoke the Gnu Project C compiler instead of the standard C compiler.
This option is useful if the standard C compiler don't generate correct code.
.TP
.B -h
Print a summary of the options to `cim', and exit.
.TP
.B -H
Omit line number information in the  compiled  program.
This  will  make the program smaller and faster.
.TP
.B -I \fIdir\fP
Use the Simula include file located in directory \fIdir\fP instead of the
standard directory.
.TP
.B -l\fIlibrary\fP
Link with object library \fIlibrary\fP.
This option is parsed to the link-command.
.TP
.B -L \fIdir\fP
Use the Simula library located in directory \fIdir\fP instead of the
standard directory.
.TP
.B -m
The memory pool size may be set at runtime by an option -m\fIn\fP.
.TP
.B -m\fIn\fP
Set the initial memory pool size to \fIn\fP mega bytes.
.TP
.B -M\fIn\fP
Set the maximal memory pool size to \fIn\fP mega bytes.
.TP
.B -N
Only link the specifiede files.
.TP
.B -o
The following argument is the name of the output 
executable file.
.TP
.B -p
If supported for the target machines, generate position-independent
code,  suitable for use in a shared library.
.TP
.B -P
Only link the specifiede files.
.TP
.B -q
Run the compiler in quiet mode.
.TP
.B -s
Only C-compile and link the specified files.
.TP
.B -S
Run the source file trough Simula-compiler, only.
.TP
.B -R
Recompile the module using the same timestamp.
.TP
.B -t
Do not remove temporary files. If a main program is compiled with option -r,
then the executable file will be removed unless this option
or option -T is specified.
.TP
.B -U\fIname\fP
Remove any initial definition of the symbol \fIname\fP
(Inverse of the -D option).
.TP
.B -v
Run the compiler in verbose mode.
.TP
.B -V
Print the version number of Cim and exit.
.TP
.B -w
Do not print warnings.
.SH FILES
.TP
.I file
Executable file.
.TP
.B \fIfile\fP.a
Library of source files, attribute files and object files.
Include this simula library when compiling and linking.
The simula library is created with ar(1V) and ranlib(1).
All source and \fI.atr\fP files should be placed before \fI.o\fP
files in the archive.
.TP
.B \fIfile\fP.o
Object file.
.TP
.B \fIfile\fP.c
Simula-compiler output file.
.TP
.B \fIfile\fP.h
Output file that is included in 
.I file.c.
.TP
.B \fIfile\fP.sim
Simula source file.
.TP
.I file
File names without an extension are assumed
to be shorthand notation for the corresponding 
.I .sim
file.
.TP
/usr/local/lib/libcim.a
Simula library that contains the environment, 
Run Time System and class Simset and Simulation. 
The source code to Simset and Simulation is also included, 
so these parts can be compiled using compiler directive
%include.
.TP
/usr/local/include/cim.h
Include file for the produced C-code.
.SH SE ALSO
cc(1), ld(1), ar(1V), lorder(1), topsort(1), ranlib(1)

.I Standard Simula,
SS 636114.
The Simula Standards Group, August 1986.

.I Viderefoering og testing av et portabelt 
.I Simula-system.
Hovedoppgave til cand.scient.-graden av Terje Mjoes.
Institutt for informatikk, Universitetet i Oslo, April 1989.

.I Et portabelt Simula-system bygget paa C.
Hovedoppgave til cand.scient-graden av Sverre Johansen.
Institutt for informatikk, Universitetet i Oslo, Mai 1987.

.SH DIAGNOSTICS
The diagnostics produced by the Simula compiler are intended to
be self-explanatory.

.SH BUGS
Bugs should be reported to bug-cim@gnu.org.

.SH AUTHOR 
Sverre Hvammen Johansen, Department of Informatics, University of Oslo.

